---
description:
globs:
alwaysApply: true
---
# Cursor IDE - Dart & Flutter 最佳实践代码规范配置
# 将此配置添加到 .cursor/rules 文件中

name: "Dart & Flutter Best Practices"
description: "Dart 和 Flutter 开发的最佳实践规范"

rules:
  # ==== 硬性规定 ====
  硬性规则：每个方法不得超过 50 行代码
  Widget build 方法不超过 40 行
  超过限制时必须提取为私有方法或独立 Widget
  initState、dispose 等生命周期方法不超过 20 行
  不要放过任何的警告，能修复尽量修复警告
  执行编译时请用 ios 进行编译
  必须代码可以编译通过

  # ==== 命名规范 ====
  naming_conventions:
    - rule: "使用 lowerCamelCase 命名变量、方法、参数"
      example: |
        ✅ Good:
        String userName = 'John';
        void calculateTotalPrice() {}
        
        ❌ Bad:
        String user_name = 'John';
        void calculate_total_price() {}

    - rule: "使用 UpperCamelCase 命名类、枚举、typedef、扩展"
      example: |
        ✅ Good:
        class UserProfile {}
        enum PaymentStatus {}
        typedef UserCallback = void Function(User user);
        
        ❌ Bad:
        class user_profile {}
        enum payment_status {}

    - rule: "使用 lowercase_with_underscores 命名库、包、文件夹、文件"
      example: |
        ✅ Good:
        user_profile.dart
        lib/models/payment_method.dart
        
        ❌ Bad:
        UserProfile.dart
        lib/Models/PaymentMethod.dart

    - rule: "常量使用 lowerCamelCase，全局常量可使用 SCREAMING_CAPS"
      example: |
        ✅ Good:
        const maxRetryCount = 3;
        const String API_BASE_URL = 'https://api.example.com';
        
        ❌ Bad:
        const MAX_RETRY_COUNT = 3;

  # ==== 代码风格 ====
  code_style:
    - rule: "使用 trailing commas 提高代码可读性和 git diff"
      example: |
        ✅ Good:
        Widget build(BuildContext context) {
          return Column(
            children: [
              Text('Title'),
              Text('Subtitle'),
            ], // trailing comma
          );
        }

    - rule: "优先使用 final 而不是 var，明确类型"
      example: |
        ✅ Good:
        final String name = 'John';
        final List<String> items = [];
        
        ❌ Bad:
        var name = 'John';
        var items = [];

    - rule: "使用 const 构造函数优化性能"
      example: |
        ✅ Good:
        const Text('Hello World')
        const SizedBox(height: 16)
        
        ❌ Bad:
        Text('Hello World')
        SizedBox(height: 16)

    - rule: "避免不必要的 new 关键字"
      example: |
        ✅ Good:
        final user = User('John', 25);
        
        ❌ Bad:
        final user = new User('John', 25);

  # ==== Flutter Widget 规范 ====
  flutter_widgets:
    - rule: "Widget build 方法保持简洁，复杂布局拆分为独立方法或 Widget"
      example: |
        ✅ Good:
        Widget build(BuildContext context) {
          return Scaffold(
            appBar: _buildAppBar(),
            body: _buildBody(),
          );
        }
        
        Widget _buildAppBar() => AppBar(title: Text('Title'));

    - rule: "使用 Key 标识重要 Widget，特别是在列表中"
      example: |
        ✅ Good:
        ListView.builder(
          itemBuilder: (context, index) {
            return ListTile(
              key: Key('item_$index'),
              title: Text(items[index]),
            );
          },
        )

    - rule: "优先使用 SingleChildScrollView 而不是 ListView 处理少量内容"
      example: |
        ✅ Good:
        SingleChildScrollView(
          child: Column(children: [...]),
        )

    - rule: "合理使用 SizedBox 而不是 Container 进行空间分隔"
      example: |
        ✅ Good:
        const SizedBox(height: 16)
        
        ❌ Bad:
        Container(height: 16)

  # ==== 状态管理 ====
  state_management:
    - rule: "StatefulWidget 中将状态逻辑与 UI 逻辑分离"
      example: |
        ✅ Good:
        class _CounterState extends State<Counter> {
          int _count = 0;
          
          void _incrementCounter() {
            setState(() {
              _count++;
            });
          }
          
          Widget build(BuildContext context) {
            return Column(
              children: [
                Text('Count: $_count'),
                ElevatedButton(
                  onPressed: _incrementCounter,
                  child: Text('Increment'),
                ),
              ],
            );
          }
        }

    - rule: "使用 Provider/Riverpod/BLoC 进行复杂状态管理"
      example: |
        ✅ Good:
        // 使用 Provider
        ChangeNotifierProvider(
          create: (context) => UserProvider(),
          child: MyApp(),
        )

    - rule: "避免在 build 方法中进行异步操作"
      example: |
        ❌ Bad:
        Widget build(BuildContext context) {
          fetchData(); // 不要在这里调用
          return Container();
        }
        
        ✅ Good:
        @override
        void initState() {
          super.initState();
          fetchData();
        }

  # ==== 异步编程 ====
  async_programming:
    - rule: "使用 async/await 而不是 .then() 链"
      example: |
        ✅ Good:
        Future<User> fetchUser() async {
          try {
            final response = await http.get(Uri.parse(url));
            return User.fromJson(json.decode(response.body));
          } catch (e) {
            throw Exception('Failed to fetch user: $e');
          }
        }

    - rule: "正确处理异步错误，使用 try-catch"
      example: |
        ✅ Good:
        Future<void> loadData() async {
          try {
            final data = await apiService.getData();
            setState(() {
              _data = data;
            });
          } catch (e) {
            _showError(e.toString());
          }
        }

    - rule: "使用 FutureBuilder/StreamBuilder 处理异步 UI"
      example: |
        ✅ Good:
        FutureBuilder<List<User>>(
          future: fetchUsers(),
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              return ListView(children: _buildUserList(snapshot.data!));
            } else if (snapshot.hasError) {
              return Text('Error: ${snapshot.error}');
            }
            return CircularProgressIndicator();
          },
        )

  # ==== 空安全 (Null Safety) ====
  null_safety:
    - rule: "使用空安全操作符 ?、??、??"
      example: |
        ✅ Good:
        String? name = user?.name;
        String displayName = name ?? 'Unknown';
        user?.updateProfile();

    - rule: "避免使用 ! 操作符，除非绝对确定非空"
      example: |
        ❌ Bad:
        String name = user.name!; // 危险
        
        ✅ Good:
        String name = user.name ?? 'Default';

    - rule: "使用 late 关键字处理延迟初始化"
      example: |
        ✅ Good:
        class MyWidget extends StatefulWidget {
          @override
          _MyWidgetState createState() => _MyWidgetState();
        }
        
        class _MyWidgetState extends State<MyWidget> {
          late AnimationController _controller;
          
          @override
          void initState() {
            super.initState();
            _controller = AnimationController(vsync: this);
          }
        }

  # ==== 性能优化 ====
  performance:
    - rule: "使用 const 构造函数减少重建"
      example: |
        ✅ Good:
        const Text('Static text')
        const Icon(Icons.star)

    - rule: "使用 ListView.builder 处理大量数据"
      example: |
        ✅ Good:
        ListView.builder(
          itemCount: items.length,
          itemBuilder: (context, index) {
            return ListTile(title: Text(items[index]));
          },
        )

    - rule: "避免在 build 方法中创建复杂对象"
      example: |
        ❌ Bad:
        Widget build(BuildContext context) {
          final style = TextStyle(fontSize: 16, color: Colors.blue);
          return Text('Hello', style: style);
        }
        
        ✅ Good:
        static const _textStyle = TextStyle(fontSize: 16, color: Colors.blue);
        
        Widget build(BuildContext context) {
          return Text('Hello', style: _textStyle);
        }

  # ==== 错误处理 ====
  error_handling:
    - rule: "自定义异常类继承 Exception"
      example: |
        ✅ Good:
        class NetworkException extends Exception {
          final String message;
          NetworkException(this.message);
          
          @override
          String toString() => 'NetworkException: $message';
        }

    - rule: "使用具体的异常类型而不是通用 Exception"
      example: |
        ✅ Good:
        if (response.statusCode != 200) {
          throw NetworkException('HTTP ${response.statusCode}');
        }

  # ==== 代码注释与文档 ====
  documentation:
    - rule: "为公共 API 编写文档注释"
      example: |
        ✅ Good:
        /// 计算两个数的和
        /// 
        /// [a] 第一个数字
        /// [b] 第二个数字
        /// 返回两数之和
        int add(int a, int b) {
          return a + b;
        }

    - rule: "使用 TODO 注释标记待完成的工作"
      example: |
        ✅ Good:
        // TODO(username): 实现用户认证逻辑
        // FIXME: 修复内存泄漏问题

  # ==== 测试规范 ====
  testing:
    - rule: "测试文件放在 test/ 目录，文件名以 _test.dart 结尾"
      example: |
        test/
        ├── models/
        │   └── user_test.dart
        ├── services/
        │   └── api_service_test.dart
        └── widgets/
            └── custom_button_test.dart

    - rule: "使用描述性的测试名称"
      example: |
        ✅ Good:
        testWidgets('should display loading indicator when data is loading', (tester) async {
          // test implementation
        });
        
        test('should return user when API call succeeds', () {
          // test implementation
        });

    - rule: "使用 setUp 和 tearDown 管理测试资源"
      example: |
        ✅ Good:
        group('UserService', () {
          late UserService userService;
          
          setUp(() {
            userService = UserService();
          });
          
          tearDown(() {
            userService.dispose();
          });
        });

  # ==== 项目结构 ====
  project_structure:
    - rule: "遵循标准的 Flutter 项目结构"
      example: |
        lib/
        ├── main.dart
        ├── app/
        │   ├── app.dart
        │   └── routes.dart
        ├── core/
        │   ├── constants/
        │   ├── utils/
        │   └── extensions/
        ├── data/
        │   ├── models/
        │   ├── repositories/
        │   └── services/
        ├── presentation/
        │   ├── pages/
        │   ├── widgets/
        │   └── providers/
        └── shared/
            ├── widgets/
            └── themes/

  # ==== 导入规范 ====
  imports:
    - rule: "按照顺序组织导入：Dart SDK、Flutter、第三方包、项目内部"
      example: |
        ✅ Good:
        import 'dart:async';
        import 'dart:convert';
        
        import 'package:flutter/material.dart';
        import 'package:flutter/services.dart';
        
        import 'package:http/http.dart' as http;
        import 'package:provider/provider.dart';
        
        import '../models/user.dart';
        import '../services/api_service.dart';

    - rule: "使用相对路径导入项目内部文件"
      example: |
        ✅ Good:
        import '../models/user.dart';
        import '../../utils/validators.dart';
        
        ❌ Bad:
        import 'package:my_app/models/user.dart';

# ==== 代码检查工具配置建议 ====
recommended_tools:
  analysis_options: |
    # analysis_options.yaml
    include: package:flutter_lints/flutter.yaml
    
    analyzer:
      exclude:
        - "**/*.g.dart"
        - "**/*.freezed.dart"
      
    linter:
      rules:
        - always_use_package_imports
        - avoid_print
        - avoid_unnecessary_containers
        - prefer_const_constructors
        - prefer_const_literals_to_create_immutables
        - sized_box_for_whitespace
        - use_build_context_synchronously

  dart_format: |
    # 使用 dart format 格式化代码
    # 在 VS Code/Cursor 中启用 "Format on Save"

  import_sorter: |
    # pubspec.yaml 中添加
    dev_dependencies:
      import_sorter: ^4.6.0
    
    # 使用命令排序导入
    # dart run import_sorter:main